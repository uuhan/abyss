import {precacheAndRoute} from 'workbox-precaching';
import {registerRoute} from 'workbox-routing';
import {CacheFirst, NetworkFirst, StaleWhileRevalidate} from 'workbox-strategies';
import {setCacheNameDetails, clientsClaim} from 'workbox-core';
import * as navigationPreload from 'workbox-navigation-preload';

/* eslint-disable eslint-comments/disable-enable-pair */
/* eslint-disable no-restricted-globals */
/* eslint-disable no-underscore-dangle */
/* globals workbox */
setCacheNameDetails({
  prefix: 'abyss',
  suffix: 'v3',
});

navigationPreload.enable();

// Control all opened tabs ASAP
clientsClaim();

/**
 * Use precaching list generated by workbox in build process.
 * https://developers.google.com/web/tools/workbox/reference-docs/latest/workbox.precaching
 */
precacheAndRoute(self.__WB_MANIFEST || []);

/**
 * Register a navigation route.
 * https://developers.google.com/web/tools/workbox/modules/workbox-routing#how_to_register_a_navigation_route
 */
// registerNavigationRoute('/index.html');

/**
 * Use runtime cache:
 * https://developers.google.com/web/tools/workbox/reference-docs/latest/workbox.routing#.registerRoute
 *
 * Workbox provides all common caching strategies including CacheFirst, NetworkFirst etc.
 * https://developers.google.com/web/tools/workbox/reference-docs/latest/workbox.strategies
 */

/** Handle API requests */
registerRoute(/\/api\//, new NetworkFirst());
/** Resource Handler */
registerRoute(/\/assets\//, new CacheFirst());

// all html page
registerRoute(/\/#\//, new StaleWhileRevalidate({
  cacheName: "html-cache",
}));
registerRoute(/\/$/, new StaleWhileRevalidate({
  cacheName: "html-cache",
}));

/** Response to client after skipping waiting with MessageChannel */
addEventListener('message', (event) => {
  const replyPort = event.ports[0];
  const message = event.data;
  if (replyPort && message && message.type === 'skip-waiting') {
    event.waitUntil(
      self.skipWaiting().then(
        () => {
          replyPort.postMessage({
            error: null,
          });
        },
        (error) => {
          replyPort.postMessage({
            error,
          });
        },
      ),
    );
  }
});
